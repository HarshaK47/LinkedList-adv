######height of a binary tree##########

class Node {
    int data;
    Node* left;
    Node* right;
};

*/
    int height(Node* root) {
        if(root==NULL){
            return -1;
        }
        int l = height(root->left);
        int r = height(root->right);
        return max(l,r)+1;
    }



--------------------------------------------------------

#### return LCA#######


Node *lca(Node *root, int v1,int v2) {
		if(root==NULL){
           		 return NULL;
        		}
        if(root->data > v1 and root->data > v2){
            return lca(root->left,v1,v2);
        }
        if(root->data <v1 and root->data<v2){
            return lca(root->right,v1,v2);
        }
        return root;
    }


------------------------------------------


## detect cycle in LL ####

bool has_cycle(Node* head) {
    Node* slow=head;
    Node* fast=head;
    bool present=false;
    while(slow!=NULL and fast!=NULL and fast->next!=NULL){
        slow=slow->next;
        fast=fast->next->next;
        if(slow==fast){
            present = true;
            break;
        }
    }
    return present;
}


---------------------------

### check balanced brackets  #########


string isBalanced(string s) {
stack<char> st;
for(int i=0;i<s.length();i++){
    if(s[i]=='(' or s[i]=='{' or s[i]=='['){
        st.push(s[i]);
        continue;
    }
    if(s[i]==')' or s[i]=='}' or s[i]==']'){
        if(st.empty()==1){
            return "NO";
        }
        char po=st.top();
        st.pop();
        if(po=='(' and s[i]==')'){
            continue;
        }
        if(po=='{' and s[i]=='}'){
            continue;
        }
        if(po=='[' and s[i]==']'){
            continue;
        }
        return "NO";
        
    }
}

if(st.empty()==1){
    return "YES";
}
return "NO";

}


--------------------------------------------------

primality done


---------------------------

### kadane's algorithm #####


// Function to find subarray with maximum sum
// arr: input array
// n: size of array
int maxSubarraySum(int arr[], int n){
    int sofar=0;
    int ending=0;
    for(int i=0;i<n;i++){
        ending+=arr[i];
        if(sofar<ending){
            sofar=ending;
        }
        if(ending<0){
            ending=0;
        }
    }
    return sofar;
    
}

-------------------------------------------------------

longest common prefix


string longestCommonPrefix(vector<string>& strs) {
        string a="";
        int mi=INT_MAX;
        if(strs.size()==0){
            return a;
        }
        
        string v = strs[0];
        
        for(int i=1;i<strs.size();i++){
            int j=0;
            int counter=0;
            int k=0;
            while(j<v.length() and k<strs[i].size()){
                if(v[j] == strs[i][k]){
                    counter++;
                }
                else{
                    break;
                }
                j++;
                k++;
            }
            mi=min(mi,counter);
        }
        return v.substr(0,mi);
        
        
        
    }


----------------------------



